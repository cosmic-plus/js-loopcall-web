{"version":3,"sources":["webpack://loopcall/webpack/universalModuleDefinition","webpack://loopcall/webpack/bootstrap","webpack://loopcall/./es5/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","async","callBuilder","options","callerLimit","limit","Math","min","callAnswer","filter","breaker","iterate","records","length","index","nextRecord","push","next","loopWithBreakpoints","concat","splitAt","tailRecords","slice","loop"],"mappings":"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","file":"loopcall.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"loopcall\"] = factory();\n\telse\n\t\troot[\"loopcall\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\n/**\n * **Loopcall** is a tiny library that enables unlimited complex queries to\n * Horizon nodes. It takes a _CallBuilder_ and accepts a few optional\n * parameters. It returns an array of records similar to the ones returned by\n * `CallBuilder.call()`.\n *\n *  @module\n */\n\n/**\n * **Fetch more than 200 records**\n *\n * To get an arbitrary amount of record:\n *\n * ```js\n * const callBuilder = server.operations().order(\"asc\")\n * const the2000FirstOperations = await loopcall(callBuilder, { limit: 2000 })\n * ```\n *\n * To get all existing records (take care with that one!):\n *\n * ```js\n * const callBuilder = server.transactions().forAccount(\"GDE...YBX\")\n * const allTransactions = await loopcall(callBuilder)\n * ```\n *\n * **Conditional Break**\n *\n * To stop fetching records when a condition is met:\n *\n * ```js\n * const callBuilder = server.transactions().forAccount(\"GDE...YBX\")\n * const thisYearTransactions = await loopcall(callBuilder, {\n *   breaker: record => record.created_at.substr(0, 4) < 2018\n * })\n * ```\n *\n * `breaker` is a _Function_ that is called over each fetched record. Once it\n * returns `true`, the fetching loop breaks and the record that triggered the\n * break is discarded.\n *\n * **Conditional Filtering**\n *\n * To filter records by condition:\n *\n * ```js\n * const callBuilder = server.transactions().forAccount(\"GDE...YBX\")\n * const transactionsWithoutMemo = await loopcall(callBuilder, {\n *   filter: record => !record.memo\n * })\n * ```\n *\n * `filter` is a _Function_ that is called over each fetched record. When\n * provided, the records are added to the query results only when it returns\n * `true`.\n *\n * **Iterating over the records on-the-fly**\n *\n * In some situations, waiting for the result to be concatenated is not an\n * option. This can be done with the `iterate` option:\n *\n * ```js\n * const callBuilder = server.transactions()\n *\n * async function showTxUntilScreenIsFilled(record) {\n *   displayTxUsingRecord(record)\n *   await endOfPageReached()\n * }\n *\n * loopcall(callBuilder, { iterate: showTxUntilScreenIsFilled })\n * ```\n *\n * This example shows a part of the code to implement unlimited scrolling on a\n * webpage showing the last transactions on a Stellar network.\n *\n * **Combining parameters**\n *\n * All those parameters may be combined together:\n *\n * ```js\n * const callBuilder = server.operations().order(\"asc\")\n *\n * function iterateOver1000RecordsMax() {\n *   let counter = 0\n *   return function() {\n *     counter++\n *     if (counter > 1000) return true\n *   }\n * }\n *\n * const the20firstAccountCreations = await loopcall(callBuilder, {\n *   limit: 20,\n *   breaker: iterateOver1000RecordsMax(),\n *   filter: record => record.type === \"create_account\"\n * })\n * ```\n *\n * Call order: `breaker` > `filter` > `iterate`.\n *\n * @alias loopcall\n * @param {CallBuilder} callBuilder A CallBuilder object\n * @param {Object} [options]\n * @param {Integer} [options.limit] The maximum number of record to return\n * @param {function} [options.iterate] A function that is called for each\n *   (filtered) record.\n * @param {Function} [options.filter] A function that accepts a record argument.\n * It is called with each fetched record. If it returns a true value, the record\n * is added to returned records, else it is discarded.\n * @param {Function} [options.breaker] A function that accepts a record\n * argument. It is called with each fetched record. If it returns a true value,\n * the loop ends and the array of the filtered records is returned.\n * @returns {Array} The fetched records\n */\n\nmodule.exports = async function (callBuilder, options = {}) {\n  const callerLimit = options.limit ? Math.min(options.limit, 200) : 200;\n  const callAnswer = await callBuilder.limit(callerLimit).call();\n\n  if (options.filter || options.breaker) {\n    return loopWithBreakpoints(callAnswer, options);\n  } else {\n    return loop(callAnswer, options.limit);\n  }\n};\n/**\n * Concatenate records from `callAnswer` pages until `limit` is reached or no\n * more are available.\n *\n * @private\n * @param {Object} callAnswer A resolved CallBuilder.call() object\n * @param {integer} limit The maximum number of record to return\n * @returns {Array} The fetched records\n */\n\n\nasync function loop(callAnswer, limit) {\n  let records = [];\n\n  while (callAnswer.records.length) {\n    if (limit) {\n      const length = records.length + callAnswer.records.length;\n\n      if (limit === length) {\n        return records.concat(callAnswer.records);\n      } else if (length > limit) {\n        const splitAt = limit - records.length;\n        const tailRecords = callAnswer.records.slice(0, splitAt);\n        return records.concat(tailRecords);\n      }\n    }\n\n    records = records.concat(callAnswer.records);\n    callAnswer = await callAnswer.next();\n  }\n\n  return records;\n}\n/**\n * Concatenate records from `callAnswer` pages that pass `options.filter` until\n * `options.limit` is reached, `options.breaker` returns a true value or no more\n * are available.\n *\n * @private\n * @param {Object} callAnswer A resolved CallBuilder.call() object\n * @param {Object} [options]\n * @param {integer} [options.limit] The maximum number of record to return\n * @param {function} [options.iterate] A function that is called for each\n *   (filtered) record.\n * @param {function} [options.filter] A function that accept a record argument. It\n *   is called with each fetched record. If it returns a true value, the record\n *   is added to returned records, else it is discarded.\n * @param {function} [options.breaker] A function that accept a record argument.\n *   It is called with each fetched record. If it returns a true value, the loop\n *   ends and the array of the filtered records is returned.\n * @returns {Array} The fetched records\n */\n\n\nasync function loopWithBreakpoints(callAnswer, options) {\n  const {\n    limit,\n    breaker,\n    filter,\n    iterate\n  } = options;\n  const records = [];\n\n  while (callAnswer.records.length) {\n    for (let index in callAnswer.records) {\n      if (limit && records.length === limit) return records;\n      const nextRecord = callAnswer.records[index];\n\n      if (breaker) {\n        const recordTriggerBreak = await breaker(nextRecord);\n        if (recordTriggerBreak) return records;\n      }\n\n      if (filter) {\n        const recordPassTest = await filter(nextRecord);\n        if (!recordPassTest) continue;\n      }\n\n      if (iterate) await iterate(nextRecord);\n      records.push(nextRecord);\n    }\n\n    callAnswer = await callAnswer.next();\n  }\n\n  return records;\n}"],"sourceRoot":""}